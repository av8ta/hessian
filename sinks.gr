import * from "./types"
import List from "list"
import Option from "option"
import { debug } from "./packages/debug"
import File, { fdWrite, FileDescriptor } from "sys/file"
import {
  FilePath,
  ensureFile,
  writeFile as writeFileToDisk,
  openFdCallback,
} from "./packages/file"
import Int64 from "int64"

let logForEach = debug("hessian:forEach", None)
let logWriteFile = debug("hessian:writeFile", None)

record SubscribeState<e> {
  mut talkback: Talkback<e> -> Void,
  mut end: Bool,
  mut offset: Int64,
}

export record WriteFileOptions {
  file: FilePath,
  rwFlag: List<File.FdFlag>,
}

export let forEach = callback => (source: Source<a>) => {
  let placeholder = signal => void
  let state = { talkback: placeholder, end: false, offset: 0L }

  source(signal => match (signal) {
    Start(talkback) => {
      state.talkback = talkback
      logForEach("Start" ++ toString(state))
      talkback(Pull)
    },
    Push(data) when !state.end => {
      logForEach("Push(data) state: " ++ toString(state))
      callback(data)
      state.talkback(Pull)
    },
    Push(_) => logForEach("Push(_)" ++ toString(state)),
    End => {
      state.end = true
    },
  })
}

export let writeFile = callback => (source: Source<a>) => {
  let placeholder = signal => void
  let state = { talkback: placeholder, end: false, offset: 0L }

  source(signal => match (signal) {
    Start(talkback) => {
      state.talkback = talkback
      logWriteFile("Start" ++ toString(state))
      talkback(Pull)
    },
    Push(data) when !state.end => {
      logWriteFile("Push(data) state: " ++ toString(state))
      let (options, value) = callback(data)
      ignore(ensureFile(options.file))
      match (writeFileToDisk(options.file, [File.Append], value)) {
        Ok(numBytes) => {
          state.offset = Int64.add(state.offset, Int64.fromNumber(numBytes))
          Push(numBytes)
          void
        },
        Err(e) => {
          logWriteFile(toString(e))
          state.talkback(Error(toString(e)))
        },
      }

      state.talkback(Pull)
    },
    Push(_) => logWriteFile("Push(_)" ++ toString(state)),
    End => {
      state.end = true
    },
  })
}
