import File, { Rights, Directory, RegularFile, DirectoryEntry } from "sys/file"
import Result from "result"
import Array from "array"
import List from "list"
import { join } from "./path"
import {
  parent,
  toString as pathToString,
  fromString as pathFromString,
} from "path"
import { logSuccess, logError, logInfo } from "./debug"

import * from "./file"

removeDirForce(File.pwdfd, "./tmp")

assert fdIsPwd(File.pwdfd)
assert !fdIsPwd(File.stdin)
assert fdIsStdin(File.stdin)
assert fdIsStdout(File.stdout)
assert fdIsStderr(File.stderr)

assert entityExists(Fd(File.pwdfd))
assert !entityExists(Fd(File.stderr))
assert entityExists(FdPath(File.pwdfd, "./"))
assert !entityExists(FdPath(File.pwdfd, "./tmp"))
assert !entityExists(FdPath(File.pwdfd, "./tmp/x"))

let pwdfdFilestats = fdFilestats(File.pwdfd)
assert Result.unwrap(pwdfdFilestats).filetype == Directory

let pwdPathFileStatsResult = statEntity(Fd(File.pwdfd))
assert Result.unwrap(pwdPathFileStatsResult).filetype == Directory

let existingParent = findExistingParent(File.pwdfd, "./tmp/a/b/c/d/file")
let (dir, pathTo) = existingParent
assert dir != normalisePath("./tmp")
assert dir == normalisePath(".///")
assert pathTo ==
  [
    "./tmp/",
    "./tmp/a/",
    "./tmp/a/b/",
    "./tmp/a/b/c/",
    "./tmp/a/b/c/d/",
    "./tmp/a/b/c/d/file",
  ]
assert Result.isOk(createDirectory(File.pwdfd, "./tmp"))
assert Result.isOk(removeDir(PwdPath("./tmp")))
assert Result.isErr(removeDir(PwdPath("./tmp")))

assert removeDir(PwdPath("./tmp")) ==
  Err("SystemError_ENOENT: No such file or directory. :./tmp")
assert Result.isOk(createDir(FdPath(File.pwdfd, "./tmp")))
assert createDir(FdPath(File.pwdfd, "./tmp")) ==
  Err("SystemError_EEXIST: File exists. :./tmp")
let fileFdResult = touch(PwdPath("./tmp/touch-file"))
assert Result.isOk(fileFdResult)
let fileFd = Result.unwrap(fileFdResult)
assert !fdIsPwd(fileFd)
assert entityExists(PwdPath("./tmp/touch-file"))
let newFileResult = createFile(
  PwdPath("./tmp/create-file"),
  { lookupFlag: [], openFlags: [], rights: [], inheriting: [], rwFlags: [] }
)
let newFileFd = Result.unwrap(newFileResult)
assert !fdIsPwd(newFileFd)
assert Result.isOk(ls(File.pwdfd))

let openFileResult = openFile(
  PwdPath("./tmp/create-file"),
  { lookupFlag: [], openFlags: [], rights: [], inheriting: [], rwFlags: [] }
)
assert Result.isOk(openFileResult)
let fileFd = Result.unwrap(openFileResult)
assert ls(fileFd) == Err("SystemError_EPERM: Operation not permitted. :./")
assert Result.isOk(createDir(PwdPath("./tmp/directory")))
assert listDirPaths(PwdPath("./tmp")) ==
  Some((["directory"], ["touch-file", "create-file"]))

Result.isOk(ensureFile(PwdPath("./tmp/x")))
Result.isOk(ensureFile(PwdPath("./tmp/y")))
Result.isOk(ensureFile(PwdPath("./tmp/z")))
Result.isOk(ensureDir(PwdPath("./tmp//a")))
Result.isOk(ensureDir(PwdPath("./tmp//b")))
Result.isOk(ensureDir(PwdPath("./tmp//b")))
Result.isOk(ensureFile(PwdPath("./tmp//b///z")))
Result.isOk(ensureFile(PwdPath("./tmp//b///z")))

Result.isOk(ensureFile(PwdPath("./tmp//b/c///q")))

let writesucess = writeFile(
  PwdPath(normalisePath("./tmp//b/c///q")),
  [],
  "file with content"
)
assert Result.isOk(writesucess)

assert ensureFile(PwdPath("./tmp//b/c///q/1")) ==
  Err(
    "SystemError_ENOTDIR: Not a directory or a symbolic link to a directory. :./tmp//b/c///q/1"
  )
assert Result.isOk(ensureFile(PwdPath("./tmp/b/c/r")))

let content = "0123456789abcdefgh\nijk\nlmnop"
let written = writeFile(PwdPath("./tmp/write-file"), [], content)
assert Result.isOk(written)
let written2 = writeFile(PwdPath("./tmp/write-file"), [File.Append], content)
assert Result.isOk(written2)

let (fd, data) = Result.unwrap(readFile(PwdPath("./tmp/write-file"), [], 10))
let (fd, data2) = Result.unwrap(readFile(Fd(fd), [], 99))
let (string1, _) = data
let (string2, _) = data2
assert string1 ++ string2 == content ++ content

match (Result.unwrap(readFile(Fd(fd), [], 99))) {
  (fd, data) =>
    match (data) {
      (string, num) => {
        assert string == "" && num == 0
      },
    },
}

match (Result.unwrap(readFile(PwdPath("./tmp/write-file"), [], 99))) {
  (fd, data) =>
    match (data) {
      (string, num) => assert string == content ++ content && num == 56,
    },
}

// cleanup ====================================== //
removeDirForce(File.pwdfd, "./tmp")

logSuccess("\n\nTests pass\n")
