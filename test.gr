import {
  test,
  equals,
  results,
  logError,
  logSuccess,
  logInfo,
} from "./packages/test"
import * from "./types"
import List from "list"
import Array from "array"
import Result from "result"

import * from "./hessian"
import Sinks, { writeFile } from "./sinks"
import Sources, { readFile } from "./sources"
import { PwdPath, Fd, openFile, removeDirForce } from "./packages/file"
import File from "sys/file"

let print = logInfo

removeDirForce(File.pwdfd, "./tmp")

test(
  "fromList source and forEach sink work as expected",
  "",
  () => {
    let mut result = []
    let callback = v => result = List.append([v + 10], result)

    pipe2(
      fromList([1, 2, 3, 4, 5, 6, 7, 8, 9, 1e1, 11, 12, 13]),
      forEach(callback)
    )
    result
  },
  equals,
  [23, 22, 21, 20.0, 19, 18, 17, 16, 15, 14, 13, 12, 11]
)

test(
  "fromArray works as expected",
  "                      ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    pipe3(
      fromArray([> 1, 2, 3, 4, 5, 6, 7, 8]),
      map(v => v + 10),
      forEach(callback)
    )
    result
  },
  equals,
  [> 11, 12, 13, 14, 15, 16, 17, 18]
)

test(
  "tap passes value to sink unmolested",
  "              ",
  () => {
    let mut result = [>]
    let mut tapResult = [>]
    let callback = v => result = Array.append(result, [> v])

    pipe3(
      fromList([1, 2, 3, 4, 5, 6, 7, 8]),
      tap(v => {
        let tappedValue = v + 10
        tapResult = Array.append(tapResult, [> tappedValue])
        tappedValue
      }),
      forEach(callback)
    )
    (result, tapResult)
  },
  equals,
  ([> 1, 2, 3, 4, 5, 6, 7, 8], [> 11, 12, 13, 14, 15, 16, 17, 18])
)

test(
  "map works as expected",
  "                            ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    pipe3(
      fromList([1, 2, 3, 4, 5, 6, 7, 8]),
      map(v => v + 10),
      forEach(callback)
    )
    result
  },
  equals,
  [> 11, 12, 13, 14, 15, 16, 17, 18]
)

test(
  "2 pipes compose as expected",
  "                      ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    let producer = pipe2(fromList([1, 2, 3, 4, 5, 6, 7, 8]), map(v => v + 10))
    let consumer = pipe3(producer, map(v => v + 10), forEach(callback))
    result
  },
  equals,
  [> 21, 22, 23, 24, 25, 26, 27, 28]
)

test(
  "3 pipes compose as expected",
  "                      ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    let producer = pipe2(fromList([1, 2, 3, 4, 5, 6, 7, 8]), map(v => v + 10))
    let operator = pipe3(producer, map(v => v + 10), map(v => v + 10))
    pipe2(operator, forEach(callback))
    result
  },
  equals,
  [> 31, 32, 33, 34, 35, 36, 37, 38]
)

test(
  "final sink should return void",
  "                    ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    let producer = pipe2(fromList([1, 2, 3, 4, 5, 6, 7, 8]), map(v => v + 10))
    let consumer = pipe3(producer, map(v => v + 10), forEach(callback))
    consumer
  },
  equals,
  void
)

test(
  "custom pipe operator composes as expected",
  "        ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    let producer = pipe2(fromList([1, 2, 3, 4, 5, 6, 7, 8]), map(v => v + 10))
    let operator = pipe3(producer, map(v => v + 10), map(v => v + 10))
    operator |> forEach(callback)
    result
  },
  equals,
  [> 31, 32, 33, 34, 35, 36, 37, 38]
)

test(
  "custom pipe operator is great devEx!",
  "             ",
  () => {
    let mut result = [>]
    let callback = v => result = Array.append(result, [> v])

    fromList([1, 2, 3, 4, 5, 6, 7, 8]) |>
      map(v => v + 10) |>
      map(v => v + 10) |>
      map(v => v + 10) |>
      forEach(callback)
    result
  },
  equals,
  [> 31, 32, 33, 34, 35, 36, 37, 38]
)

test(
  "writeFile appends to file at path",
  "                ",
  () => {
    let options = {
      file: PwdPath("./tmp/write.txt"),
      rwFlags: [File.Append],
    }: Sinks.WriteFileOptions

    fromArray([> 1, 2, 3, 4, 5, 6, 7, 8]) |>
      map(v => v + 10) |>
      writeFile(v => (options, toString(v) ++ ","))
  },
  equals,
  void
)

test(
  "readFile reads file from Fd",
  "                ",
  () => {
    let fd = Result.expect(
      "Error opening file to read: " ++ "./tmp/write.txt",
      openFile(
        PwdPath("./tmp/write.txt"),
        {
          lookupFlag: [],
          openFlags: [],
          rights: [File.FdRead, File.FdSeek, File.FdTell],
          inheriting: [],
          rwFlags: [],
        }
      )
    )
    let options = {
      file: Fd(fd),
      rwFlags: [],
      size: 8,
    }: Sources.ReadFileOptions

    let mut result = ""

    readFile(options) |>
      forEach(v => {
        result = result ++ v
      })
    result == "11,12,13,14,15,16,17,18,"
  },
  equals,
  true
)

test(
  "readFile reads file from PwdPath",
  "                ",
  () => {

    let options = {
      file: PwdPath("./tmp/write.txt"),
      rwFlags: [],
      size: 8,
    }: Sources.ReadFileOptions

    let mut result = ""

    readFile(options) |>
      forEach(v => {
        result = result ++ v
      })
    result == "11,12,13,14,15,16,17,18,"
  },
  equals,
  true
)

test(
  "readFile errors trying to read non-existent file",
  "                ",
  () => {

    let options = {
      file: PwdPath("./tmp/non-existant-dir/write.txt"),
      rwFlags: [],
      size: 8,
    }: Sources.ReadFileOptions

    let mut result = ""

    readFile(options) |>
      forEach(v => {
        result = result ++ v
      })

    result == ""
  },
  equals,
  true
)

if (results.fails > 0) {
  logSuccess("✅ " ++ toString(results.succeses) ++ " tests passed.")
  logError("❌ " ++ toString(results.fails) ++ " tests failed.\n")
} else {
  logSuccess("✅ All " ++ toString(results.succeses) ++ " tests passed.\n")
}

assert results.fails == 0
