import File, {
  Rights,
  Directory,
  RegularFile,
  DirectoryEntry,
  FdFlag,
} from "sys/file"
import Result from "result"
import Array from "array"
import List from "list"
import String from "string"
import Number from "number"
import { join } from "./path"
import {
  parent,
  toString as pathToString,
  fromString as pathFromString,
} from "path"
import { logSuccess, logError, logInfo, debug } from "./debug"
import { systemErrors } from "./syserror"

/**
 * @section subtitle: Types
 */
export enum FilePath {
  Fd(File.FileDescriptor),
  PwdPath(String), /* fd = File.pwdfd */
  FdPath(File.FileDescriptor, String),
}

export record PathOpenOptions {
  lookupFlag: List<File.LookupFlag>,
  openFlags: List<File.OpenFlag>,
  rights: List<File.Rights>,
  inheriting: List<File.Rights>,
  rwFlags: List<File.FdFlag>,
}

/**
 * @section subtitle: Helpers
 */
export let fdIsPwd = fd => fd == File.pwdfd
export let fdIsStdin = fd => fd == File.stdin
export let fdIsStdout = fd => fd == File.stdout
export let fdIsStderr = fd => fd == File.stderr

export let normalisePath = (path: String) => pathToString(pathFromString(path))

let ignoreResultPrint = result => {
  Result.peekErr(e => logError(toString(e) ++ "\n"), result)
}

/**
 * @section subtitle: File information
 */
export let fdFilestats = fd =>
  match (File.fdFilestats(fd)) {
    Ok(stats) => Ok(stats),
    Err(e) => systemErrors(e, "./"),
  }

let statEntity = (fd, path) =>
  match (File.pathFilestats(fd, [File.SymlinkFollow], path)) {
    Err(e) => Err(systemErrors(e, path)),
    Ok(stats) => Ok(stats),
  }

export let pathFileStats = (file: FilePath) =>
  match (file) {
    Fd(fd) => statEntity(fd, "./"),
    PwdPath(path) => statEntity(File.pwdfd, path),
    FdPath(fd, path) => statEntity(fd, path),
  }

/**
 * @section subtitle: Existence
 */
export let entityExists = (file: FilePath) =>
  match (pathFileStats(file)) {
    Ok(_) => true,
    _ => false,
  }

export let findExistingParent = (fd, path: String) => {
  let rec recurse = (fd, path, pathTo: List<String>) => {
    match (entityExists(FdPath(fd, path))) {
      true => (path, pathTo),
      false => {
        let parent = pathToString(parent(pathFromString(path)))
        recurse(fd, parent, [path, ...pathTo])
      },
    }
  }
  recurse(fd, path, [])
}

/**
 * @section subtitle: Creation
 */
let createDirectory = (fd, path) => {
  let dirPath = normalisePath(path)
  match (File.pathCreateDirectory(fd, dirPath)) {
    Ok(_) => Ok(void),
    Err(e) => systemErrors(e, path),
  }
}

export let createDir = (filePath: FilePath) => {
  match (filePath) {
    Fd(f) => createDirectory(f, "./"),
    PwdPath(path) => createDirectory(File.pwdfd, path),
    FdPath(fd, path) => createDirectory(fd, path),
  }
}

let touch = (file: FilePath) => {
  let open = (fd, path) => {
    let opened = File.pathOpen(fd, [], path, [File.Create], [], [], [])
    match (opened) {
      Ok(fd) => Ok(fd),
      Err(e) => systemErrors(e, path),
    }
  }
  match (file) {
    Fd(f) => open(f, "./"),
    PwdPath(path) => open(File.pwdfd, path),
    FdPath(f, path) => open(f, path),
  }
}

/**
 * @section subtitle: Deletion
 */
let rmDir = (fd, path) =>
  match (File.pathRemoveDirectory(fd, path)) {
    Ok(_) => Ok(void),
    Err(e) => systemErrors(e, path),
  }

export let removeDir = (filePath: FilePath) => {
  match (filePath) {
    Fd(f) => rmDir(f, "./"),
    PwdPath(path) => rmDir(File.pwdfd, path),
    FdPath(fd, path) => rmDir(fd, path),
  }
}

let rmFile = (fd, path) =>
  match (File.pathUnlink(fd, path)) {
    Err(e) => systemErrors(e, path),
    _ => Ok(void),
  }

export let removeFile = (filePath: FilePath) => {
  match (filePath) {
    Fd(f) => rmFile(f, "./"),
    PwdPath(path) => rmFile(File.pwdfd, path),
    FdPath(fd, path) => rmFile(fd, path),
  }
}

/**
 * @section subtitle: Opening files
 */
export let openFile = (file: FilePath, options: PathOpenOptions) => {
  let { lookupFlag, openFlags, rights, inheriting, rwFlags } = options

  let open = (fd, path) => {
    let opened = File.pathOpen(
      fd,
      lookupFlag,
      path,
      openFlags,
      rights,
      inheriting,
      rwFlags
    )
    match (opened) {
      Ok(fd) => Ok(fd),
      Err(e) => systemErrors(e, path),
    }
  }
  match (file) {
    Fd(f) => open(f, "./"),
    PwdPath(path) => open(File.pwdfd, path),
    FdPath(f, path) => open(f, path),
  }
}

export let createFile = (file: FilePath, options: PathOpenOptions) => {
  let { lookupFlag, openFlags, rights, inheriting, rwFlags } = options
  let openFlag = [File.Create, ...openFlags]
  openFile(
    file,
    { lookupFlag, openFlags: openFlag, rights, inheriting, rwFlags }
  )
}

export let openFdCallback = (filePath: FilePath, options, callback) => {
  match (filePath) {
    Fd(fd) => callback(Ok((fd, "./"))),
    PwdPath(path) =>
      match (openFile(PwdPath(path), options)) {
        Ok(fd) => callback(Ok((fd, path))),
        Err(e) => callback(systemErrors(e, path)),
      },
    FdPath(fd, path) =>
      match (openFile(FdPath(fd, path), options)) {
        Ok(fd) => callback(Ok((fd, path))),
        Err(e) => callback(systemErrors(e, path)),
      },
  }
}

let fdCallback = (filePath: FilePath, callback) =>
  match (filePath) {
    Fd(fd) => callback(fd, "./"),
    PwdPath(path) => callback(File.pwdfd, path),
    FdPath(fd, path) => callback(fd, path),
  }

/**
 * @section subtitle: Directory entries
 */

/**
 * @param fd: FileDescriptor to list contents.
 * @returns   Array of DirectoryEntry or None
 * @example   ls(Fd(File.pwdfd))
 */
let ls = fd =>
  match (File.fdReaddir(fd)) {
    Ok(entries) => Ok(entries),
    Err(e) => systemErrors(e, "./"),
  }

/**
 * @param filePath: FilePath to list contents.
 * @returns         Array of DirectoryEntry or None
 * @example         listDir(PwdPath("./a/dir/with/contents/"))
 */
export let listDir = (filePath: FilePath) => {
  let options = {
    lookupFlag: [],
    openFlags: [],
    rights: [File.FdReaddir, File.PathReadlink],
    inheriting: [],
    rwFlags: [],
  }
  match (filePath) {
    Fd(fd) => ls(fd),
    PwdPath(path) =>
      match (openFile(PwdPath(path), options)) {
        Ok(fd) => ls(fd),
        Err(e) => systemErrors(e, path),
      },
    FdPath(fd, path) =>
      match (openFile(FdPath(fd, path), options)) {
        Ok(fd) => ls(fd),
        Err(e) => systemErrors(e, path),
      },
  }
}

/**
 * @param entries:  Array of DirectoryEntry to reduce.
 * @returns         Tuple of Lists: (dirs, files)
 * @example         reduceEntries(Result.unwrap(listDir(PwdPath("./"))))
 */
export let reduceEntries = entries =>
  Array.reduce((acc, entry: DirectoryEntry) => {
    let (dirs, files) = acc
    match (entry.filetype) {
      RegularFile => (dirs, [entry.path, ...files]),
      Directory => ([entry.path, ...dirs], files),
      _ => ([], []),
    }
  }, ([], []), entries)

/**
 * @param filePath: FilePath to list contents.
 * @returns         Tuple of (dirs, files) lists
 * @example         listDirPaths(PwdPath("./a/dir/with/contents/"))
 */
export let listDirPaths = (filePath: FilePath) =>
  match (listDir(filePath)) {
    Ok(entries) => Some(reduceEntries(entries)),
    Err(e) => {
      systemErrors(e, toString(filePath))
      None
    },
  }

/**
 * @section subtitle: Recursive creation/deletion
 */

/**
 * @param fd: FileDescriptor of directory to recursively delete.
 * @returns   void.
 * @example   removeDirForce(PwdPath("./a/dir/with/contents/"))
 */
export let removeDirForce = (fd, rootPath) => {
  let rec recurse = (fd, path) => {

    match (listDirPaths(FdPath(fd, path))) {
      None => void,
      Some((dirs, files)) => {
        List.forEach(p => recurse(fd, normalisePath(path) ++ "/" ++ p), dirs)
        List.forEach(p =>
          ignoreResultPrint(rmFile(fd, normalisePath(path) ++ "/" ++ p)), files)
        ignoreResultPrint(rmDir(fd, path))
      },
    }
  }
  recurse(fd, rootPath)
}

let mkdirp = (fd, paths: List<String>) => {
  let errors = List.reduce((acc, path) => {
    match (createDir(FdPath(fd, path))) {
      Ok(_) => acc,
      Err(e) => [toString(e), ...acc],
    }
  }, [], paths)
  match (List.length(errors) > 0) {
    true => Err(errors),
    false => Ok(void),
  }
}

/**
 * @param filePath: FilePath to write to.
 * @returns         void on success or list of error strings.
 * @example         ensureDir(PwdPath("./a/bunch/of/non/existent/dirs"))
 * 
 * Exceptions are stringified & returned as Err(String) so you can handle them.
 */
export let ensureDir = (filePath: FilePath) => {
  let makePath = (fd, path) => {
    let dirPath = normalisePath(path)
    let (_, pathToDir) = findExistingParent(fd, dirPath)
    mkdirp(fd, pathToDir)
  }
  fdCallback(filePath, makePath)
}

/**
 * @param filePath: FilePath to create file if not present.
 * @returns         fd or error string.
 * @example         ensureFile(PwdPath("./write.txt"))
 * 
 * Ensures file exists but gives no further permissions to the returned file descriptor.
 * 
 * Exceptions are stringified & returned as Err(String) so you can handle them.
 */
export let ensureFile = (filePath: FilePath) => {
  let makePath = (fd, path) => {
    let dirPath = pathToString(parent(pathFromString(normalisePath(path))))
    let (_, pathToDir) = findExistingParent(fd, dirPath)
    mkdirp(fd, pathToDir)
    touch(filePath)
  }
  fdCallback(filePath, makePath)
}

/**
 * @section subtitle: Read and Write
 */

/**
 * @param filePath: FilePath to write to.
 * @param rwFlags:  Write flags e.g. [File.Append]
 * @param data:     Data to write.
 * @returns         Ok(numBytes) | Err(String)
 * @example writeFile(PwdPath(      "./write.txt"), [], "data overwritten to ./write.txt")
 * @example writeFile(FdPath(fd,    "./write.txt"), [File.Append], "data appended to some-fd-dir/write.txt")
 * @example writeFile(Fd(File.pwdfd,"./write.txt"), [File.Append], "data appended to ./write.txt")
 * 
 * Exceptions are stringified & returned as Err(String) so you can handle them.
 */
export let writeFile = (filePath, rwFlags, data) => {
  let options = {
    lookupFlag: [],
    openFlags: [File.Create],
    rights: [File.FdWrite],
    inheriting: [],
    rwFlags,
  }

  let write = (fd, path) =>
    match (createFile(filePath, options)) {
      Ok(f) => {
        match (File.fdWrite(f, data)) {
          Ok(x) => Ok((f, x)),
          Err(e) => systemErrors(e, path),
        }
      },
      Err(e) => systemErrors(e, toString(filePath)),
    }

  fdCallback(filePath, write)
}

/**
 * @param filePath: FilePath to read from.
 * @param rwFlags:  Read flags.
 * @param size:     Max number of bytes to read.
 * @returns         (fd, (data, numBytes))
 * @example readFile(PwdPath("./write.txt"), [], 1024)
 * @example readFile(FdPath(fd,    "./write.txt"), [], 1024)
 * @example readFile(Fd(File.pwdfd,"./write.txt"), [], 1024)
 * 
 * Exceptions are stringified & returned as Err(String) so you can handle them.
 */
export let readFile = (filePath: FilePath, rwFlags: List<FdFlag>, size) => {
  let options = {
    lookupFlag: [],
    openFlags: [],
    rights: [File.FdRead, File.FdSeek, File.FdTell],
    inheriting: [],
    rwFlags,
  }

  let read = openResult =>
    match (openResult) {
      Ok((fd, path)) =>
        match (File.fdRead(fd, size)) {
          Ok(x) => Ok((fd, x)),
          Err(e) => systemErrors(e, path),
        },
      Err(e) => systemErrors(e, toString(filePath)),
    }

  openFdCallback(filePath, options, read)
}

// this should probably exist but I don't seem to be actually using it!
let readFileFd = (fd, size: Number) =>
  match (File.fdRead(fd, size)) {
    Ok(x) => Ok(x),
    Err(e) => systemErrors(e, toString(fd)),
  }
