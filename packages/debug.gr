import Process from "sys/process"
import String from "string"
import Array from "array"
import File from "sys/file"
import {
  black,
  bgBlack,
  red,
  bgRed,
  green,
  bgGreen,
  yellow,
  bgYellow,
  blue,
  bgBlue,
  magenta,
  bgMagenta,
  cyan,
  bgCyan,
  white,
  bgWhite,
} from "./colours"
import Random from "random"
import { sdbmNum as hash } from "./sdbm"

let stderr = message => {
  ignore(File.fdWrite(File.stderr, "\n" ++ message))
}

export let logError = message => stderr(red(message))
export let logSuccess = message => stderr(green(message))
export let logInfo = message => stderr(cyan(message))

let log = (name, message) => logInfo("[" ++ name ++ "]" ++ " : " ++ message)

export let colours = (num, message) =>
  match (num) {
    0 => stderr(red(message)),
    1 => stderr(bgRed(message)),
    2 => stderr(green(message)),
    3 => stderr(bgGreen(message)),
    4 => stderr(yellow(message)),
    5 => stderr(bgYellow(message)),
    6 => stderr(blue(message)),
    7 => stderr(bgBlue(message)),
    8 => stderr(magenta(message)),
    9 => stderr(bgMagenta(message)),
    10 => stderr(cyan(message)),
    11 => stderr(bgCyan(message)),
    12 => stderr(white(message)),
    13 => stderr(bgWhite(message)),
    _ => stderr(cyan(message)),
  }

let log = (name, message, colour) =>
  match (colour) {
    Some(c) => stderr(c("[" ++ name ++ "]" ++ " : " ++ message)),
    None => colours(hash(name) % 13, "[" ++ name ++ "]" ++ " : " ++ message),
  }

let parseDebug = () =>
  match (Process.env()) {
    Ok(vars) => {
      let env = Array.find(str => String.startsWith("DEBUG=", str), vars)
      match (env) {
        Some(str) => {
          let stripped = String.slice(6, String.length(str), str)
          match (String.contains(",", stripped)) {
            false => Some([> stripped]),
            true => Some(String.split(",", stripped)),
          }
        },
        None => None,
      }
    },
    Err(error) => {
      print(error)
      None
    },
  }

export let debug = (name, colour) => message => {
  let params = parseDebug()
  match (params) {
    None => void,
    Some(p) => {
      if (p[0] == "*") log(name, message, colour)
      else match (Array.find(s => String.contains(name, s), p)) {
        None => void,
        Some(param) =>
          match (param == name) {
            true => log(name, message, colour),
            false => void,
          },
      }
    },
  }
}
